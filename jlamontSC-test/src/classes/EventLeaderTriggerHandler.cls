/*
EventLeaderTriggerHandler

Called by EventLeaderTrigger

Ensure that Campaigns have no more than one Primary Leader
Ensure that Campaigns with Active status have a Primary Leader

Maslow - December, 2015

Modified 2/2017 Maslow

Ensure that leaders entered via Campaign (not Club Event) have ClubEventId assigned
Allow deleting all leaders if deleting Campaign
*/
public with sharing class EventLeaderTriggerHandler {
	public static Boolean leadersChecked = false;
    private static String userType = UserInfo.getUserType();
	public static void beforeInsertUpdate(List<Event_Leader__c> newList, Map<Id,Event_Leader__c> oldMap) {
		//It may be necessary to update other leader records to move Primary Leader flag
		//Static variable "leadersChecked" is used to ensure updates generated by this trigger
		//will not start endless loop
		if(leadersChecked) {
			return;
		}
		
		leadersChecked = true;
		
		//Ensure that newList has no duplicate Primary Leaders
		Map<Id, Id> campaignToPrimaryLeader = new Map<Id, Id>();
		Map<Id, Campaign> campaignToStatus = new Map<Id, Campaign>();
		Set<Id> campSet = new Set<Id>();
		for(Event_Leader__c ldr : newList) {
			if(ldr.Is_Primary_Leader__c) {
				if(campaignToPrimaryLeader.get(ldr.Campaign__c) == null) {
					campaignToPrimaryLeader.put(ldr.Campaign__c, ldr.Id);
				}
				else {
					ldr.addError('An Event may only have one Primary Leader');
				}
			}
			campSet.add(ldr.Campaign__c);
		}
		if(campSet.isEmpty()) {
			return;
		}
		
		//Create and populate map to correlate Campaign to a set of Event Leaders
		Map<Id, Set<Event_Leader__c>> campaignToLeaders = new Map<Id, Set<Event_Leader__c>>();
		List<Event_Leader__c> campList = [
			select Id, Campaign__c, Is_Primary_Leader__c 
			from Event_Leader__c
			where 
				Campaign__c in :campSet
		];
		for(Event_Leader__c ldr : campList) {
			Set<Event_Leader__c> ldrSet = campaignToLeaders.get(ldr.Campaign__c);
			if(ldrSet == null) {
				ldrSet = new Set<Event_Leader__c>();
				ldrSet.add(ldr);
				campaignToLeaders.put(ldr.Campaign__c, ldrSet);
			}
			else {
				ldrSet.add(ldr);
				campaignToLeaders.put(ldr.Campaign__c, ldrSet);
			}
		}
		
		//Create and populate map to correlate Campaign Id with Campaign Status
		List<Campaign> cmpList = [
			select Id, Status__c from Campaign where Id in :campSet
		];
		for(Campaign cmp : cmpList) {
			campaignToStatus.put(cmp.Id, cmp);
		}
		
		List<Event_Leader__c> leadersToUpdate = new List<Event_Leader__c>();
		if(EventHelper.sourceObject == 'Campaign') {
			for(Event_Leader__c ldr : newList) {
				Set<Event_Leader__c> ldrSet = campaignToLeaders.get(ldr.Campaign__c);
				if(ldrSet == null) {
					if(campaignToStatus.get(ldr.Campaign__c).Status__c != 'In Development') {
						//No Primary Leader 
						ldr.addError('An Active Event Must have a Primary Leader');
					}
				}
				else {
					for(Event_Leader__c evLdr : ldrSet) {
						if(ldr.Is_Primary_Leader__c) {
							if(evLdr.Id != ldr.Id) {
								if(evLdr.Is_Primary_Leader__c) {
									//New Primary Leader - make other leaders non-Primary
									Event_Leader__c ldrToUpdate = new Event_Leader__c(
										Id = evLdr.Id,
										Is_Primary_Leader__c = false
									);
									leadersToUpdate.add(ldrToUpdate);
								}
							}
						}
						//If Campaign is Active, make sure that there is a Primary Leader
						Campaign cmp = campaignToStatus.get(evLdr.Campaign__c);
						if(cmp.Status__c != 'In Development') {
							if( oldMap != null) {
								Event_Leader__c oldLeader = oldMap.get(ldr.Id);
								if(oldLeader.Is_Primary_Leader__c && ! ldr.Is_Primary_Leader__c) {
									ldr.addError('An Active Event Must have a Primary Leader');
								}
							}
						}
					}
				}
			}
		}
		
		if(oldMap == null) {
			//insert
			if(EventHelper.sourceObject == 'Campaign') {
				Set<Id> idSet = new Set<Id>();
				for(Event_Leader__c ldr : newList) {
					idSet.add(ldr.Campaign__c);
				}
				Map<Id, Campaign> campMap = new Map<Id, Campaign>([
					SELECT Id, Club_Event__c FROM Campaign
					WHERE Id in :idSet
				]);
				for(Event_Leader__c ldr : newList) {
					Campaign camp = campMap.get(ldr.Campaign__c);
					if(camp != null) {
						ldr.Club_Event__c = camp.Club_Event__c;
					}
				}
			}
		}
		
		if( ! leadersToUpdate.isEmpty() ) {
			update leadersToUpdate;
		}
	}
	public static void beforeDelete(List<Event_Leader__c> ldrList) {
		//Do not allow Primary Leader of Campaign with Active Status to be deleted
		//Unless deleting Campaign
		if(leadersChecked) {
			return;
		}
		Map<Id, Campaign> campaignToStatus = new Map<Id, Campaign>();
		Set<Id> campaignSet = new Set<Id>();
		for(Event_Leader__c ldr : ldrList) {
			campaignSet.add(ldr.Campaign__c);
		}
		if( ! campaignSet.isEmpty() ) {
			List<Campaign> campList = [
				select Id, Status__c from Campaign where Id in :campaignSet
			];
			for(Campaign camp : campList) {
				campaignToStatus.put(camp.Id, camp);
			}
			for(Event_Leader__c ldr : ldrList) {
				if(ldr.Is_Primary_Leader__c) {
					if(campaignToStatus.get(ldr.Campaign__c).Status__c != 'In Development') {
						ldr.addError('An Active Event Must have a Primary Leader');
					}
				}
			}
		}
	}
}