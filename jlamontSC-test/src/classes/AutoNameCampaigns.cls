/* 
	AutoNameCampaigns

	When Campaigns with record types 'Events' and 'Offline Action' are created by users with selected profiles
	(selected profiles saved in Custom Setting 'CampaignValidation__c')
	the name (and external id) will be generated by this class.
	
	This class is called by trigger CampaignTrigger.  
           
  	9/16/2016		Mark Maslow			Original
	9/29/2016		Tami Lau			Added AddUP Campaign record type
	4/7/2017		Tami Lau			Added Lists record type
*/

public without sharing class AutoNameCampaigns {
    private static Id eventsTypeId = Schema.SObjectType.Campaign.getRecordTypeInfosByName().get('Events').getRecordTypeId();
    private static Id actionsTypeId = Schema.SObjectType.Campaign.getRecordTypeInfosByName().get('Offline Action').getRecordTypeId();
    private static Id addupTypeId = Schema.SObjectType.Campaign.getRecordTypeInfosByName().get('AddUP Campaign').getRecordTypeId();
    private static Id listsTypeId = Schema.SObjectType.Campaign.getRecordTypeInfosByName().get('Lists').getRecordTypeId();
	private static Map<Integer, String> monthsMap = new Map<Integer, String> {
	  1 => 'A',
	  2 => 'B',
	  3 => 'C',
	  4 => 'D',
	  5 => 'E',
	  6 => 'F',
	  7 => 'G',
	  8 => 'H',
	  9 => 'J',
	  10 => 'K',
	  11 => 'L',
	  12 => 'M'
	};
    
	public static void setNames(List<Campaign> campList) {
		CampaignValidation__c cv = CampaignValidation__c.getInstance(UserInfo.getProfileId());
        List<Campaign> renameList = new List<Campaign>();
        
        for (Campaign camp : campList) {
            if (camp.RecordTypeId == listsTypeId || (camp.RecordTypeId == eventsTypeId && camp.RecurringEvent__c != null)) {
                renameList.add(camp);
            }
        }
        
        for (Campaign camp : campList) {
            if (cv.Auto_name_Campaigns__c) {
            	if ((camp.RecordTypeId == eventsTypeId && EventHelper.sourceObject != 'ClubEvent') || camp.RecordTypeId == actionsTypeId || camp.RecordTypeId == addupTypeId) {
                	renameList.add(camp);
            	}
            }
        }

		if( ! renameList.isEmpty() ) {
			List<String> numList = getNumbers(renameList.size());
			Integer i=0;
			for(Campaign camp : renameList) {
				if(camp.RecordTypeId == eventsTypeId) {
					camp.Name = '5' + getDatePortion() + 'SF' + numList.get(i);				
				}
				else if(camp.RecordTypeId == actionsTypeId) {
					camp.Name = 'X' + getDatePortion() + 'HE' + numList.get(i);				
				}
                else if(camp.RecordTypeId == addupTypeId) {
					camp.Name = '7' + getDatePortion() + 'AU' + numList.get(i);				
				}
                else if(camp.RecordTypeId == listsTypeId) {
					camp.Name = 'X' + getDatePortion() + 'LI' + numList.get(i);				
				}                    
				camp.External_ID__c = camp.Name;
				i++;
			}
		}        
	}
    
	private static List<String> getNumbers(Integer size) {
		List<UniqueNumber__c> nums = new List<UniqueNumber__c>();
		for(Integer i=0; i < size; i++) {
			nums.add(new UniqueNumber__c());
		}
		Savepoint sp = Database.setSavepoint();
		Database.SaveResult[] srList = Database.insert(nums, false);
		Set<Id> idSet = new Set<Id>();
		for (Database.SaveResult sr : srList) {
			idSet.add(sr.getId());			
		}
		List<UniqueNumber__c> generatedNums = [
			select Name from UniqueNumber__c where Id in :idSet
		];
		List<String> numList = new List<String>();
		for(UniqueNumber__c unique : generatedNums) {
			String Name = unique.Name;
			String num = Name.substring(Name.length()-4);
			numList.add(num);
		}
		Database.rollback(sp);
		return numList;
	}
    
	public static String getDatePortion() {
		Date thisDay = System.today();
		String yy = ('00' + String.valueOf(math.mod(thisDay.year(), 100))).right(2);
		String m = monthsMap.get(thisDay.month());
		return yy + m;
	}
}