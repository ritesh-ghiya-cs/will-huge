<!-- 
Copyright 2011 Jeff Trull <jetrull@sbcglobal.net>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 -->
<apex:component controller="ExtJSStoreRemotingCtrl">
    <!-- A Visualforce component implementing an ExtJS4 grid backed by JS Remoting from a controller -->
    <!-- Jeff Trull 8/10/2011 -->
    <apex:attribute name="object" type="String" description="sObject to generate a grid for" required="true"/>
    <apex:attribute name="fields" type="String[]" description="list of fields to display" required="true"/>
    <apex:attribute name="minimized" type="Boolean" description="whether to initially render the grid in minimized state" default="false"/>
    <apex:attribute name="rows" type="int" description="how many rows to display in grid" default="19"/>

    <!-- Assumes using page loaded ExtJS already -->

    <!-- Icons.  Using those included with ExtJS. -->
    <style type="text/css">
        .icon-add
        {
            background:url({!$Resource.ExtJS42}/ext-4.2.1.883/examples/shared/icons/fam/add.gif) 0 no-repeat !important
        }
        .icon-delete
        {
            background:url({!$Resource.ExtJS42}/ext-4.2.1.883/examples/shared/icons/fam/delete.gif) 0 no-repeat !important
        }
    </style>

    <script>
        // BUG WORKAROUNDS
        // 1) DirectProxy gets perfectly fine formatted data from api calls, then discards it
        // This may simply be a difference between ExtJS 3 (used by Remoting) and 4...
        Ext.data.proxy.Direct.prototype.createRequestCallback =
            function(request, operation, callback, scope){
                var me = this;
                return function(data, event){
                    // supply "data" (properly processed data), not "event", as fourth arg
                    me.processResponse(event.status, operation, request,
                                       {data: data}, callback, scope);
                };
            };

        // 2) DirectProxy does not supply extraParams to create/update/delete calls - only reads
        // Solved by making a special writer that inserts them into the regular data
        Ext.define('Jet.SFDC.writer', {
            extend: 'Ext.data.writer.Json',
            alias: 'writer.sfdc',
            config: {extraParams: undefined},
            constructor: function(config) {
                this.callParent([config]);
            },
            writeRecords: function(request, data) {
                this.callParent([request, data]);
                if ((this.extraParams !== undefined) && (this.extraParams instanceof Object)) {
                    Ext.apply(request.jsonData, this.extraParams);
                }
                return request;
            }});
            
        // old Direct used by SFDC does not supply getArgs method (expected by 4.1) for Remoting methods
        ExtJSStoreRemotingCtrl.query.directCfg.method.getArgs = Ext.direct.RemotingMethod.prototype.getArgs;
        ExtJSStoreRemotingCtrl.create.directCfg.method.getArgs = Ext.direct.RemotingMethod.prototype.getArgs;
        ExtJSStoreRemotingCtrl.updat.directCfg.method.getArgs = Ext.direct.RemotingMethod.prototype.getArgs;
        ExtJSStoreRemotingCtrl.delet.directCfg.method.getArgs = Ext.direct.RemotingMethod.prototype.getArgs;
                       
        // Force.com supplies dates as UTC datetime, which ExtJS interprets as a time, so when it displays
        // the date it is offset by the timezone.  In the US this means it gets displayed as one day too early.
        // Fix by supplying a custom parse/format function pair to make client dates be midnight on the chosen
        // date at the client, while the original UTC values are stored on the server.
        // NOTE supposedly you can also specify a "convert" function when you define the field, but for me that
        // broke the outbound path (writing to server)
        Ext.Date.parseFunctions["SFDC"] = function(v) {
               if ((v == null) || (v == ''))
                   return null;
               date_as_sent = new Date(parseInt(v));
               return new Date(date_as_sent.getUTCFullYear(),
                                 date_as_sent.getUTCMonth(),
                                 date_as_sent.getUTCDate());
        };
        // not necessary to define a parseFunction here as SFDC seems happy to accept JSON date format

        (function() {  // protect global namespace (and other grids) from stuff local to us

            // use JS Remoting to get field metadata info
            // TODO check for creatability/updatability of the chosen SObject type by this user
            // decide whether to use "fieldset" or "fields".  Give "fields" priority (for manual override?)
            var fieldlist;
            var fields = '{!fields}';
            if ((fields == null) || (fields == '') || (fields == '[]')) {
                Ext.Msg.alert('no fields were supplied to this component');
                return;
            }
            if (fields.substr(0, 1) == '[') {
                // a fieldset - remove brackets and split on comma+space
                fieldlist = fields.substr(1, fields.length - 2).split(', ');
            } else {
                fieldlist = fields.split(',');
            }
            ExtJSStoreRemotingCtrl.describeFields('{!object}', fieldlist,
                function(fieldData, e) {
                    if (!e.status) {
                        Ext.Msg.alert('Server error', e.message);
                        return;
                    }
                    // define a Model using the information returned from the SObject describe call
                    var extfields = [];
                    if (fieldlist.indexOf('Id') == -1) {
                        extfields.push({
                            name: 'Id',
                            // Workaround: in Ext 3 (nonexistent) id property was removed from phantom records
                            persist: false  // make sure we don't try to output this on create.
                        }); // always include ID in the store
                    }
                    for (var i = 0; i < fieldData.length; i++) {
                        var field = {name: fieldData[i].name, type: fieldData[i].fieldType};
                        if (fieldData[i].fieldType == "datetime") {
                            field.dateFormat = "time";    // Force.com date serialization uses javascript time value
                            field.type = "date";
                        } else if (fieldData[i].fieldType == "date") {
                            field.type = "date";
                            field.dateReadFormat = "SFDC";    // use special format defined above
                            field.dateWriteFormat = "c";      // ISO 8601
                        } else if (fieldData[i].fieldType == "double") {
                            field.type = "float";
                        } else if (fieldData[i].fieldType == "boolean") {
                            field.type = "bool";
                        } else if ((fieldData[i].fieldType == "integer") || (fieldData[i].fieldType == "boolean")) {
                            field.type = fieldData[i].fieldType;
                        } else {
                            field.type = "string";
                        }
                        if (field.name == 'Id') {
                            field.persist = false;
                        }
                        // TODO add validations (list of valid values, regex, min/max) if possible
                        // known possible checks: precision, scale, updateable/createable, max length for strings
                        extfields.push(field);
                    }
                    // TODO add associations to other models
                    var modelName = Ext.String.capitalize("{!object}");
                    var extraParams = {sobjname: '{!object}',    // will be sent along with start, limit, etc.
                                       fields: fieldlist.join(',')};
                    Ext.define(modelName, {
                        extend: 'Ext.data.Model',
                        fields: extfields,
                        idProperty: 'Id',
                        proxy: {
                            type: 'direct',
                            api: {read:     ExtJSStoreRemotingCtrl.query,
                                  create:   ExtJSStoreRemotingCtrl.create,
                                  update:   ExtJSStoreRemotingCtrl.updat,
                                  destroy:  ExtJSStoreRemotingCtrl.delet
                                  },
                            limitParam: 'recordCount',   // because "limit" is an Apex keyword
                            sortParam: 'sortParams',     // because "sort" is a keyword too
                            pageParam: undefined,        // suppress sending "page", we don't need it
                            reader: {type: 'json',
                                     root: 'records',
                                     messageProperty: 'errorMessage'
                                    },
                            writer: {
                                type: 'sfdc',
                                root: 'records',
                                writeAllFields: false,   // otherwise empty fields will transmit as empty strings, instead of "null"/not present
                                extraParams: extraParams,
                                allowSingle: false,   // need to always be an array for code simplification
                                encode:  false        // docs say "set this to false when using DirectProxy"
                                     },
                            listeners: {
                                
                                exception: {fn: function(proxy, response, operation) {
                                                    // TODO: some errors are still not propagated correctly to the user by this code...
                                                    // investigation needed
                                                    console.log('got exception with response=', response, 'operation=', operation);
                                                    if (response.data) {
                                                        if (response.data.errorMessage) {
                                                            // my custom field is present; let's use it
                                                            Ext.Msg.alert('Error', response.data.errorMessage);
                                                        } else {
                                                            Ext.Msg.alert('Error', operation.action + ' failed: ' + response.data.message);
                                                        }
                                                    }
                                                }
                                           }},
                            extraParams: extraParams
                        }});
                    var pagesize = parseInt('{!rows}'); // otherwise we end up with a string value, which subtly fails
                    // create a store that uses the Model
                    var store = new Ext.data.Store({
                        model: Ext.String.capitalize("{!object}"),
                        pageSize: pagesize,
                        remoteSort: true,
                        autoLoad: {!!minimized},
                        // Instead of using store's "autoSync" feature, sync to server on update and remove,
                        // but not add/create, as the initial record will be blank and probably fail validation
                        listeners: {
                            remove: {fn: function() {
                                            store.sync();
                                        }},
                            update: {fn: function() {
                                            store.sync();
                                        }}
                        }});
                    
                    // and a grid that uses the Store
                    // define its columns using previously accessed metadata
                    var columns = [];
                    for (var i = 0; i < fieldData.length; i++) {
                        var col = {
                            dataIndex: fieldData[i].name,
                            text: fieldData[i].label,
                            sortable: fieldData[i].sortable,
                            width: 150
                        }
                        // use data type from above to determine type of Editor and xtype to use
                        if ((fieldData[i].fieldType == "integer") || (fieldData[i].fieldType == "double")) {
                            col.xtype = 'numbercolumn';
                            if (fieldData[i].fieldType == "integer") {
                                // do not show decimals
                                col.format = '0,000';
                            }
                        } else if (fieldData[i].fieldType == "boolean") {
                            col.xtype = 'booleancolumn';
                            col.trueText = 'Yes';
                            col.falseText = 'No';
                        } else if ((fieldData[i].fieldType == "date") || (fieldData[i].fieldType == "datetime")) {
                            col.xtype = 'datecolumn';
                        }
                        // set up editors for modifiable fields
                        if (fieldData[i].modifiable) {
                            if (fieldData[i].fieldType == "date") {
                                col.editor = {xtype : 'datefield'};
                            } else if (fieldData[i].fieldType == "boolean") {
                                // ideally would use checkbox here, but it seems Ext 4 has moved this into examples...
                                // there is a "checkboxfield", but then it shows up as Yes/No until you click to edit, which is ugly
                                var options = [[true, 'Yes'], [false, 'No']];
                                if (fieldData[i].nillable) {
                                    options.push(['', null]);
                                }
                                col.editor = {xtype : 'combobox',
                                              store : options};
                            } else if (fieldData[i].fieldType == "picklist") {
                                col.editor = {xtype : 'combobox',
                                              store : fieldData[i].picklistValues};
                            } else if ((fieldData[i].fieldType == "integer") || (fieldData[i].fieldType == "double")) {
                                col.editor = {xtype : 'numberfield'};
                            } else {
                                col.editor = {xtype : 'textfield'};
                            }
                            col.editor.allowBlank = fieldData[i].nillable;
                            if (fieldData[i].fieldType == "double") {
                                col.editor.allowDecimals = true;
                            }
                            // validators for special text field types
                            if ((fieldData[i].fieldType == "url") || (fieldData[i].fieldType == "email")) {
                                col.editor.vtype = fieldData[i].fieldType;
                            }
                        }
                        columns.push(col);
                    }
                    
                    Ext.onReady(function() {  // defer creation of UI elements
                        var rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {
                                            clicksToEdit: 2 // to more easily distinguish editing from row selection
                                        });
                        var grid = Ext.create('Ext.grid.Panel', {
                            title: modelName,
                            store: store,
                            columns: columns,
                            selModel: {xtype : 'rowmodel',
                                       mode : 'MULTI'},
                            collapsed: {!minimized},
                            collapsible: true,
                            listeners: {
                                // if we begin minimized, load upon expansion
                                expand: function() {
                                    store.load();
                                }
                            },
                            // enable editing
                            plugins: [rowEditing],
                            // paging toolbar at bottom
                            bbar: Ext.create('Ext.PagingToolbar', {
                                store: store,
                                displayInfo: true,
                                displayMsg: 'Displaying objects {0} - {1} of {2}',
                                emptyMsg: 'no records found'
                            }),
                            // add/delete buttons at top
                            dockedItems: [{
                                xtype: 'toolbar',
                                items: [{
                                    text: 'Add',
                                    iconCls: 'icon-add',
                                    handler: function(){
                                        // empty record
                                        // TODO insert default field values, if any (Field can take one, will that do?)
                                        store.insert(0, Ext.create(modelName, {}));
                                        rowEditing.startEdit(0, 0);
                                    }
                                }, '-', {
                                    itemId: 'delete',
                                    text: 'Delete',
                                    iconCls: 'icon-delete',
                                    disabled: true,
                                    handler: function(){
                                        var selections = grid.getView().getSelectionModel().getSelection();
                                        if (selections) {
                                            // verify the user wants to do this
                                            Ext.Msg.show({title: 'Delete Rows',
                                                          msg: String.format('Remove these {0} entries from {1}?',
                                                                             selections.length, modelName),
                                                          buttons: Ext.Msg.OKCANCEL,
                                                          fn: function(btn, txt) {
                                                                if (btn == 'ok') {
                                                                    store.remove(selections);
                                                                }
                                                          }});
                                        }
                                    }
                                }]
                            }],
                            height: 460,
                            renderTo: '{!$Component.myGrid}'
                        });
                        // disable delete button if no row is selected
                        grid.getSelectionModel().on('selectionchange', function(selModel, selections){
                            grid.down('#delete').setDisabled(selections.length === 0);
                        });
                    
                    });
            });
        })();  // end IIFE
    </script>
    <apex:outputPanel id="myGrid" layout="block"/>
</apex:component>